#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE BigInt
#include <boost/test/unit_test.hpp>

#include <bigint.h>

void check_int(int value) {
	std::stringstream ss;
	ss << value;
	BOOST_CHECK_EQUAL((std::string) bigint(value), ss.str());
}
void check_string(std::string const& value) {
	BOOST_CHECK_EQUAL((std::string) bigint(value), value);
}

BOOST_AUTO_TEST_CASE(bigint_construct)
{
	check_int(0);
	check_int(100);
	check_int(-100);
	check_int(2147483647);
	check_int(-2147483648);

	check_string("0");
	check_string("100");
	check_string("-100");
	check_string("2147483647");
	check_string("-2147483648");
	check_string("2347012498126481624781624781263512456127341782647162546918273");
	check_string("-2345781234891379048623457237848123741238974193849012378904819248");

	BOOST_CHECK_EQUAL((std::string) bigint("-0"), "0");
	BOOST_CHECK_EQUAL((std::string) bigint("000000000000000000000000100"), "100");
	BOOST_CHECK_EQUAL((std::string) bigint("-000000000000000000000000100"), "-100");
}

void check_add(std::string const& a, std::string const& b, std::string const& res) {
	BOOST_CHECK_EQUAL(bigint(a) + bigint(b), bigint(res));
	BOOST_CHECK_EQUAL(bigint(b) + bigint(a), bigint(res));
}

BOOST_AUTO_TEST_CASE(bigint_add)
{
	check_add("0", "-0", "0");
	check_add("100", "-100", "0");
	check_add("-100", "100", "0");
	check_add("100", "100", "200");
	check_add("-100", "-100", "-200");

	check_add("2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "-2343434222393252566998675613066860228782846852066365216357900975");
	check_add("-2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "2343434222393252566998675613066860228782846852066365216357900975");
	check_add("2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "2348128247389505530248238862629387253695101535631659541451737521");
	check_add("-2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "-2348128247389505530248238862629387253695101535631659541451737521");
}

void check_sub(std::string const& a, std::string const& b, std::string const& res) {
	BOOST_CHECK_EQUAL(bigint(a) - bigint(b), bigint(res));
	BOOST_CHECK_EQUAL(bigint(b) - bigint(a), -bigint(res));
}

BOOST_AUTO_TEST_CASE(bigint_subtract)
{
	check_sub("0", "-0", "0");
	check_sub("100", "100", "0");
	check_sub("-100", "-100", "0");
	check_sub("100", "-100", "200");
	check_sub("-100", "100", "-200");

	check_sub("2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "-2343434222393252566998675613066860228782846852066365216357900975");
	check_sub("-2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "2343434222393252566998675613066860228782846852066365216357900975");
	check_sub("2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "2348128247389505530248238862629387253695101535631659541451737521");
	check_sub("-2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "-2348128247389505530248238862629387253695101535631659541451737521");
}

void check_mul(std::string const& a, std::string const& b, std::string const& res) {
	BOOST_CHECK_EQUAL(bigint(a) * bigint(b), bigint(res));
	BOOST_CHECK_EQUAL(bigint(b) * bigint(a), bigint(res));
}


BOOST_AUTO_TEST_CASE(bigint_multiply)
{
	check_mul("0", "-0", "0");
	check_mul("100", "-100", "-10000");
	check_mul("-100", "100", "-10000");
	check_mul("100", "100", "10000");
	check_mul("-100", "-100", "10000");

	check_mul("2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_mul("-2347012498126481624781624781263512456127341782647162546918273", "2345781234891379048623457237848123741238974193849012378904819248", "-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_mul("2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_mul("-2347012498126481624781624781263512456127341782647162546918273", "-2345781234891379048623457237848123741238974193849012378904819248", "5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
}

void check_less(std::string const& a, std::string const& b) {
	BOOST_CHECK(bigint(a) < bigint(b));
	BOOST_CHECK(!(bigint(b) < bigint(a)));

	BOOST_CHECK(bigint(b) > bigint(a));
	BOOST_CHECK(!(bigint(a) > bigint(b)));

	BOOST_CHECK(bigint(a) <= bigint(b));
	BOOST_CHECK(!(bigint(b) <= bigint(a)));

	BOOST_CHECK(bigint(b) >= bigint(a));
	BOOST_CHECK(!(bigint(a) >= bigint(b)));

	BOOST_CHECK(!(bigint(b) == bigint(a)));
	BOOST_CHECK(!(bigint(a) == bigint(b)));

	BOOST_CHECK(bigint(a) != bigint(b));
	BOOST_CHECK(bigint(b) != bigint(a));
}

void check_eq(std::string const& a, std::string const& b) {
	BOOST_CHECK(!(bigint(a) < bigint(b)));
	BOOST_CHECK(!(bigint(b) < bigint(a)));

	BOOST_CHECK(!(bigint(b) > bigint(a)));
	BOOST_CHECK(!(bigint(a) > bigint(b)));

	BOOST_CHECK(bigint(a) <= bigint(b));
	BOOST_CHECK(bigint(b) <= bigint(a));

	BOOST_CHECK(bigint(b) >= bigint(a));
	BOOST_CHECK(bigint(a) >= bigint(b));

	BOOST_CHECK(bigint(b) == bigint(a));
	BOOST_CHECK(bigint(a) == bigint(b));

	BOOST_CHECK(!(bigint(a) != bigint(b)));
	BOOST_CHECK(!(bigint(b) != bigint(a)));
}

void check_eq(std::string const& a) {
	check_eq(a, a);
}


BOOST_AUTO_TEST_CASE(bigint_compare)
{
	check_eq("0", "-0");
	check_eq("100", "0000000000000000000000000100");

	check_eq("2347012498126481624781624781263512456127341782647162546918273");
	check_eq("-2347012498126481624781624781263512456127341782647162546918273");
	check_eq("5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_eq("-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");

	check_less("-100", "0");
	check_less("0", "100");
	check_less("-100", "100");
	check_less("100", "200");
	check_less("-200", "-100");

	check_less("2347012498126481624781624781263512456127341782647162546918273", "3347012498126481624781624781263512456127341782647162546918273");
	check_less("-2347012498126481624781624781263512456127341782647162546918273", "3347012498126481624781624781263512456127341782647162546918273");
	check_less("-3347012498126481624781624781263512456127341782647162546918273", "2347012498126481624781624781263512456127341782647162546918273");
	check_less("-3347012498126481624781624781263512456127341782647162546918273", "-2347012498126481624781624781263512456127341782647162546918273");

	check_less("2347012498126481624781624781263512456127341782647162546918273", "5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_less("-2347012498126481624781624781263512456127341782647162546918273", "5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_less("-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704", "2347012498126481624781624781263512456127341782647162546918273");
	check_less("-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704", "-2347012498126481624781624781263512456127341782647162546918273");
}

void check_stream(std::string const& a) {
	bigint x = a;
	std::stringstream ss;
	ss << x;
	BOOST_CHECK_EQUAL(a, ss.str());
	bigint y;
	ss >> y;
	BOOST_CHECK_EQUAL(x, y);
}

BOOST_AUTO_TEST_CASE(bigint_stream_operators)
{
	check_stream("0");
	check_stream("-100");
	check_stream("100");
	check_stream("2347012498126481624781624781263512456127341782647162546918273");
	check_stream("-2347012498126481624781624781263512456127341782647162546918273");
	check_stream("5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
	check_stream("-5505577876160638521545911663481601164887929659284913815816157501078626421433445593272712739504712920054093596419550493318704");
}